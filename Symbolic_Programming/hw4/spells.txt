CG-USER(1): (setf tpl:*print-length* nil)
NIL
CG-USER(2): (setf *objects* '(whiskey-bottle bucket frog chain))
(WHISKEY-BOTTLE BUCKET FROG CHAIN)
CG-USER(3): (setf *map* '((living-room (you are in the living-room of a wizards house. there is a wizard snoring loudly on the couch.)
                           (west door garden)  
                           (upstairs stairway attic))
              (garden (you are in a beautiful garden. there is a well in front of you.)
                      (east door living-room))
              (attic (you are in the attic of the wizards house. there is a giant welding torch in the corner.)
                     (downstairs stairway living-room))))
((LIVING-ROOM (YOU ARE IN THE LIVING-ROOM OF A WIZARDS HOUSE. THERE IS A WIZARD SNORING LOUDLY ON THE COUCH.) (WEST DOOR GARDEN) (UPSTAIRS STAIRWAY ATTIC))
 (GARDEN (YOU ARE IN A BEAUTIFUL GARDEN. THERE IS A WELL IN FRONT OF YOU.) (EAST DOOR LIVING-ROOM))
 (ATTIC (YOU ARE IN THE ATTIC OF THE WIZARDS HOUSE. THERE IS A GIANT WELDING TORCH IN THE CORNER.) (DOWNSTAIRS STAIRWAY LIVING-ROOM)))
CG-USER(4): (setf *object-locations* '((whiskey-bottle living-room)
                           (bucket living-room)
                           (chain garden)
                           (frog garden)))
((WHISKEY-BOTTLE LIVING-ROOM) (BUCKET LIVING-ROOM) (CHAIN GARDEN) (FROG GARDEN))
CG-USER(5): (setf *location* 'living-room)
LIVING-ROOM
CG-USER(6): (defun describe-location (location map)
  (second (assoc location map)))
DESCRIBE-LOCATION
CG-USER(7): (defun describe-location (location map)
  (second (assoc location map)))
DESCRIBE-LOCATION
CG-USER(8): (describe-location 'living-room *map*)
(YOU ARE IN THE LIVING-ROOM OF A WIZARDS HOUSE. THERE IS A WIZARD SNORING LOUDLY ON THE COUCH.)
CG-USER(9): (defun describe-path (path)
  `(there is a ,(second path) going ,(first path) from here.))
DESCRIBE-PATH
CG-USER(10): (describe-path '(west door garden))
(THERE IS A DOOR GOING WEST FROM HERE.)
CG-USER(11): (defun describe-paths (location map)
  (apply #'append (mapcar #'describe-path (cddr (assoc location map)))))
DESCRIBE-PATHS
CG-USER(12): (describe-paths 'living-room *map*)
(THERE IS A DOOR GOING WEST FROM HERE. THERE IS A STAIRWAY GOING UPSTAIRS FROM HERE.)
CG-USER(13): (defun is-at (obj loc obj-loc)
  (eq (second (assoc obj obj-loc)) loc))
IS-AT
CG-USER(14): (is-at 'whiskey-bottle 'living-room *object-locations*)
T
CG-USER(15): (defun describe-floor (loc objs obj-loc)
  (apply #'append (mapcar (lambda (x)
                            `(you see a ,x on the floor.))
                          (remove-if-not (lambda (x)
                                           (is-at x loc obj-loc))
                                         objs))))
DESCRIBE-FLOOR
CG-USER(16): (describe-floor 'living-room *objects* *object-locations*)
(YOU SEE A WHISKEY-BOTTLE ON THE FLOOR. YOU SEE A BUCKET ON THE FLOOR.)
CG-USER(17): (defun look ()
  (append (describe-location *location* *map*)
          (describe-paths *location* *map*)
          (describe-floor *location* *objects* *object-locations*)))

LOOK
CG-USER(18):
CG-USER(19): (look)
(YOU ARE IN THE LIVING-ROOM OF A WIZARDS HOUSE. THERE IS A WIZARD SNORING LOUDLY ON THE COUCH. THERE IS A DOOR GOING WEST FROM HERE. THERE IS A STAIRWAY GOING
 UPSTAIRS FROM HERE. YOU SEE A WHISKEY-BOTTLE ON THE FLOOR. YOU SEE A BUCKET ON THE FLOOR.)
CG-USER(20): (defun walk-direction (direction)
  (let ((next (assoc direction (cddr (assoc *location* *map*)))))
    (cond (next (setf *location* (third next)) (look))
	  (t '(you cant go that way.)))))
WALK-DIRECTION
CG-USER(21): (walk-direction 'west)
(YOU ARE IN A BEAUTIFUL GARDEN. THERE IS A WELL IN FRONT OF YOU. THERE IS A DOOR GOING EAST FROM HERE. YOU
 SEE A FROG ON THE FLOOR. YOU SEE A CHAIN ON THE FLOOR.)
CG-USER(22): (defmacro defspel (&rest rest) `(defmacro ,@rest))
DEFSPEL
CG-USER(23): (defspel walk (direction)
  `(walk-direction ',direction))
WALK
CG-USER(24): (walk east)
(YOU ARE IN THE LIVING-ROOM OF A WIZARDS HOUSE. THERE IS A WIZARD SNORING LOUDLY ON THE COUCH. THERE IS A
 DOOR GOING WEST FROM HERE. THERE IS A STAIRWAY GOING UPSTAIRS FROM HERE. YOU SEE A WHISKEY-BOTTLE ON THE
 FLOOR. YOU SEE A BUCKET ON THE FLOOR.)
CG-USER(25): (defun pickup-object (object)
  (cond ((is-at object *location* *object-locations*) (push (list object 'body) *object-locations*)
                                                      `(you are now carrying the ,object))
	(t '(you cannot get that.))))
PICKUP-OBJECT
CG-USER(26): 
(defspel pickup (object)
  `(pickup-object ',object))
CG-USER(26): (defspel pickup (object)
  `(pickup-object ',object))
PICKUP
CG-USER(27): (pickup whiskey-bottle)
(YOU ARE NOW CARRYING THE WHISKEY-BOTTLE)
CG-USER(28): (defun inventory ()
  (remove-if-not (lambda (x)
		   (is-at x 'body *object-locations*))
		 *objects*))
INVENTORY
CG-USER(29): (defun have (object)
  (member object (inventory)))
HAVE
CG-USER(30): (setf *chain-welded* nil)
NIL
CG-USER(31): (defun weld (subject object)
  (cond ((and (eq *location* 'attic)
              (eq subject 'chain)
              (eq object 'bucket)
              (have 'chain)
              (have 'bucket)
              (not *chain-welded*))
	 (setf *chain-welded* 't)
         '(the chain is now securely welded to the bucket.))
        (t '(you cannot weld like that.))))
WELD
CG-USER(32): (weld 'chain 'bucket)
(YOU CANNOT WELD LIKE THAT.)
CG-USER(33): (setf *bucket-filled* nil)
NIL
CG-USER(34): (defun dunk (subject object)
  (cond ((and (eq *location* 'garden)
              (eq subject 'bucket)
              (eq object 'well)
              (have 'bucket)
              *chain-welded*)
         (setf *bucket-filled* 't) '(the bucket is now full of water))
        (t '(you cannot dunk like that.))))
DUNK
CG-USER(35): (defspel game-action (command subj obj place &rest rest)
  `(defspel ,command (subject object)
     `(cond ((and (eq *location* ',',place)
                  (eq ',subject ',',subj)
                  (eq ',object ',',obj)
                  (have ',',subj))
             ,@',rest)
            (t '(i cant ,',command like that.)))))
GAME-ACTION
CG-USER(36): (game-action weld chain bucket attic
             (cond ((and (have 'bucket) (setf *chain-welded* 't))
                    '(the chain is now securely welded to the bucket.))
                   (t '(you do not have a bucket.))))
Warning: WELD was a function and is being redefined as a macro
WELD
CG-USER(37): (weld chain bucket)
(I CANT WELD LIKE THAT.)
CG-USER(38): (game-action dunk bucket well garden
             (cond (*chain-welded* (setf *bucket-filled* 't) '(the bucket is now full of water))
                   (t '(the water level is too low to reach.))))
Warning: DUNK was a function and is being redefined as a macro
DUNK
CG-USER(39): (game-action splash bucket wizard living-room
             (cond ((not *bucket-filled*) '(the bucket has nothing in it.))
                   ((have 'frog) '(the wizard awakens and sees that you stole his frog. 
                                   he is so upset he banishes you to the 
                                   netherworlds- you lose! the end.))
                   (t '(the wizard awakens from his slumber and greets you warmly. 
                        he hands you the magic low-carb donut- you win! the end.))))
SPLASH